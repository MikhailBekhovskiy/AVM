The main computational module provides polynomial algebra and differentiation.
Polynoms are defined as hierarchical structures (variables -> (*, ^) -> monomials -> (+, -) -> polynomials)
AV is shorthand for additional variable

The projected flow of the program is thus:
1. User enters the system of PDEs or functions
2. All user variables are read without dependencies
    (!the original dependencies stemming from input RHS in case of PDEs are left until all substitutions are made);
    this step is parsing and initiating variables (dependent have args but have no dependencies)
    might be optimized by storing originally dependent vars in a slightly different format, since their args are essentially just independent vars.
3. Continuosly replace functions with polynomial arguments by AVs (since AVs derivatives depend on original RHS, 
    leave the calculation until all substitutions are made and we have polynomial dependencies of originals); 
    this step is parsing and initiating new variables with lib dependencies
4. When all functions have been replaced, get polynomial dependencies for original functions in terms of ALL the variables (including AV); 
    this step is parsing only
5. Calculate (in the same order they have been introduced!) derivatives for AVs, since all needed data is now present;
    this step involves computer algebra

Dictionary which stores all initiated symbolic variables, indexed by name
At first contains user variables, then gets filled with AVs
global_var_dict = {
    var_name: Var(),
    .....
}

The basic class is Var, which is defined like this:
(WARNING! Due to recurrent nature of chain rule it HAS to rely on Poly class, which is constructed from Vars;
differentiating between independent vars and dependent vars depends on calculations;
initial Vars have no args and deps; initial Polynoms will be constructed from user vars
the stop condition is in derivative method, which gives answer in case of independent variable)

Var = {
    name = str(),                         name is a string variable, it identifies it in global dictionary of variables

    var_args = [Poly0(),...,Poly_k()],    list of positional polynomial arguments; if its empty then var is independent

    var_deps = {                          dictionary of polynomial derivatives,
        0: Poly(),                        for AV always contains derivatives by positional arguments (read from lib),                         
        ...                               positional derivatives are keyed by index in args, derivative by positional is simply reading from here
        k: Poly(),

        var0: Poly(),                     derivatives by independent variables are calculated using chain rule 
        ...                               after all substitutions have been made
        varn: Poly()                      keyed by varname
    },

    derivative: self, varname, var_dict -> Poly    if variable is dependent, calculate by chainrule (should be added to deps to avoid extra work). otherwise read from deps
    printout: self -> void                         for debug purposes only; logs all Var data
}

Monom = {
    coeff = float(),                                        all monomials are normalized so that there is a single numerical coefficient, in future support for symbolic coefficients (parametric)
    vars = {                                                dict of variables (by name) with respective numerical powers 
        var_name: pow,
        ...
    },                                      
    signature: str                                          string with sorted varnames with powers for algebra                                     

    derivative: self, varname, var_dict -> Poly             derivate Monomial by Var using chain rule and Var.ders; results in a Polynomial
    prod: self, Monom -> Monom                              symbolic algebra 
    add_similar: self, Monom -> Monom
    scalar_prod: self, float -> Monom

    printout: self -> str                                   used by Poly printout
}

Poly = {
    monomials = {                                           lists all monomials 
        signature: Monom(),
        ...
    }                   

    add: self, Poly -> Poly                                 symbolic algebra
    scalar_prod: self, float -> Poly
    prod: self, Poly -> Poly

    derivative: self, varname, var_dict -> Poly             derivate Poly by Var using chain-rule, Monom method and Var.var_deps                                

    printout: self -> str                                   for output
}


